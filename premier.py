# -*- coding: utf-8 -*-
"""Premier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VkfzEiWtEfl8S3_mrC5tAOXoqcV2PjxB
"""

import pandas as pd
import numpy as np

pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)

df = pd.read_csv('Football.csv')

df = df.drop(['Date_day','Date_hour','home_team_goals','home_team_goals_assist','away_team_goals','away_team_goals_assist','home_team_yellow_card_current_time','away_team_yellow_card_current_time','home_team_yellow_card','away_team_yellow_card','home_team_yellow_card_why','away_team_yellow_card_why',
'home_team_red_card_current_time',	'home_team_red_card',	'home_team_red_card_why',	'away_team_red_card_current_time',	'away_team_red_card',	'away_team_red_card_why',	'home_team_substitutions_current_time',	'home_team_substitutions',	'home_team_substitutions_with',	'home_team_substitution_why',	'away_team_substitutions_current_time',	'away_team_substitutions',	'away_team_substitutions_with',	'away_team_substitution_why',
'Pass_Success_per_Host','Pass_Success_per_Home','Clearances_Completed_Host','Clearances_Completed_Home','Distance_Covered_(km)_Home','Distance_Covered_(km)_Host','Interceptions_Home','Interceptions_Host','Crosses_Completed_Host','Crosses_Completed_Home','Completed_Passes_Home','Completed_Passes_Host'],axis=1)

df = df[(df.League=='Premier-league') & (df.season_year.isin(['2022/2023'])) & ((df.home_team=='Arsenal') | (df.away_team=='Arsenal'))]

import ast


df['home_score'] = pd.to_numeric(df['home_score'], errors='coerce').fillna(0)
df['away_score'] = pd.to_numeric(df['away_score'], errors='coerce').fillna(0)


class MinutoPartido:
  def __init__(self, minuto: str):
    if "+" in minuto:
      self.minuto = int(minuto.split("+")[0])
      self.adicional = int(minuto.split("+")[1])
    else:
      self.minuto = int(minuto)
      self.adicional = 0
    if self.minuto <= 45:
      self.periodo = 1
    else:
      self.periodo = 2
    
  def __str__(self):
      return f"{self.minuto}+{self.adicional} (Periodo {self.periodo})"
    
  def __gt__(self, other):
      if self.minuto == other.minuto:
        return self.adicional > other.adicional
      return self.minuto > other.minuto
  
  
def cambio_resultados(home_team_goals_current_time: str, away_team_goals_current_time: str) -> int:
  home_team_goals_current_time = ast.literal_eval(home_team_goals_current_time) if isinstance(home_team_goals_current_time, str) else home_team_goals_current_time
  away_team_goals_current_time = ast.literal_eval(away_team_goals_current_time) if isinstance(away_team_goals_current_time, str) else away_team_goals_current_time
  
  away_goals = [(MinutoPartido(i), "away") for i in away_team_goals_current_time]
  home_goals = [(MinutoPartido(i), "home") for i in home_team_goals_current_time]

  all_goals = away_goals + home_goals
  all_goals.sort(key=lambda x: x[0])
  
  diferencia = 0
  anterior = 0
  cambios = 0
  
  for _, equipo in all_goals:
    
    anterior = diferencia
    
    if equipo == "home":
      diferencia += 1
    else:
      diferencia -= 1
      
    if anterior in [0, 1, -1] and diferencia in [0, 1, -1]:
      cambios += 1
      
  return cambios


def goles_primer_tiempo(minutos_goles):
  if(pd.isna(minutos_goles)):
    return 0

  minutos = ast.literal_eval(minutos_goles) if isinstance(minutos_goles, str) else minutos_goles

  goles_primer_tiempo = 0

  for m in minutos:
    minuto = m[:-1]
    if "+" in minuto:
      base = int(minuto.split("+")[0])
    else:
      base = int(minuto)

    if base <= 45:
      goles_primer_tiempo +=1

  return goles_primer_tiempo

def goles_segundo_tiempo(minutos_goles):
    if(pd.isna(minutos_goles)):
      return 0

    minutos = ast.literal_eval(minutos_goles) if isinstance(minutos_goles, str) else minutos_goles

    goles_segundo_tiempo = 0

    for m in minutos:
      minuto = m[:-1]
      if "+" in minuto:
        base = int(minuto.split("+")[0])
      else:
        base = int(minuto)

      if base > 45:
        goles_segundo_tiempo +=1

    return goles_segundo_tiempo

#def cantidad_cambios_resultado(fila):


def armar_lista_cambios(lista_minutos, lista_cambio_goles):
  lista_minutos = ast.literal_eval(lista_minutos) if isinstance(lista_minutos, str) else lista_minutos
  lista_cambio_goles = ast.literal_eval(lista_cambio_goles) if isinstance(lista_cambio_goles, str) else lista_cambio_goles

 # print(f"Lista minutos: {lista_minutos}")
 # print(f"Tipo de variable lista minutos: {type(lista_minutos)}")


  lista_cambios = []

  if isinstance(lista_minutos, float):
    return np.nan

  for i in range(len(lista_minutos)):
    minuto_str = lista_minutos[i][:-1]
    try:

      if "+" in minuto_str:
        minuto = int(minuto_str.split("+")[0])
      else:
        minuto = int(minuto_str)
      cant_goles_home = int(lista_cambio_goles[i][0])
      cant_goles_away = int(lista_cambio_goles[i][-1])

      lista_cambios.append((minuto,cant_goles_home,cant_goles_away))
    except ValueError as e:
      print(f"Error de valor: {e}")

  return lista_cambios



def armar_lista_cambios_unificada_ordenada(lista_cambios_home,lista_cambios_away):

  if np.isnan(lista_cambios_home).any():
    return lista_cambios_away

  if np.isnan(lista_cambios_away).any():
    return lista_cambios_home

  lista_cambios_unificada = lista_cambios_home + lista_cambios_away

  return sorted(lista_cambios_unificada,key=lambda x: x[0])


def contar_cambios_resultado(lista_minutos_home,lista_cambio_goles_home,lista_minutos_away,lista_cambio_goles_away):

  lista_cambios_resultado_ordenada = armar_lista_cambios_unificada_ordenada(armar_lista_cambios(lista_minutos_home,lista_cambio_goles_home),armar_lista_cambios(lista_minutos_away,lista_cambio_goles_away))

  if(np.isnan(lista_cambios_resultado_ordenada).any()):
    return 0

  cantidad_cambios = 1

  primer_cambio_resultado = lista_cambios_resultado_ordenada[0]

  if(primer_cambio_resultado[1] == 1):
    resultado = 'Victoria Parcial Home'
  else:
    resultado = 'Victoria Parcial Away'

  for i in range(1,len(lista_cambios_resultado_ordenada)):
    #cambio_resultado_ant = lista_cambios_resultado_ordenada[i-1]
    #print(f"i: {i}")

    cambio_resultado = lista_cambios_resultado_ordenada[i]

    if((resultado == 'Victoria Parcial Home' or resultado == 'Victoria Parcial Away') and cambio_resultado[1] == cambio_resultado[2]):
      cantidad_cambios += 1
      #print("Empatan")
      resultado = 'Empate Parcial'

    elif(resultado == 'Empate Parcial'):
      cantidad_cambios += 1
      if(cambio_resultado[1] > cambio_resultado[2]):
        #print("Pasa a ganar local")
        resultado = 'Victoria Parcial Home'
      else:
        #print("Pasa a ganar visitante")
        resultado = 'Victoria Parcial Away'
  return cantidad_cambios

def contar_cambios_resultado_fila(fila):
  #print(fila.name)
  return contar_cambios_resultado(fila['home_team_goals_current_time'],fila['home_team_goals_current_score'],fila['away_team_goals_current_time'],fila['away_team_goals_current_score'])


df["total_goals_home_first_half"] = df["home_team_goals_current_time"].apply(goles_primer_tiempo)
df["total_goals_home_second_half"] = df["home_team_goals_current_time"].apply(goles_segundo_tiempo)

df["total_goals_away_first_half"] = df["away_team_goals_current_time"].apply(goles_primer_tiempo)
df["total_goals_away_second_half"] = df["away_team_goals_current_time"].apply(goles_segundo_tiempo)


df["changes_in_result"] = df.apply(contar_cambios_resultado_fila,axis=1)


df_aggregated1 = df.groupby(['home_team']).agg(total_goals_home=('home_score','sum'),total_goals_home_first_half=('total_goals_home_first_half','sum'),total_goals_home_second_half=('total_goals_home_second_half','sum'))
df_aggregated2 = df.groupby(['away_team']).agg(total_goals_away=('away_score','sum'),total_goals_away_first_half=('total_goals_away_first_half','sum'),total_goals_away_second_half=('total_goals_away_second_half','sum'))

 
# Estadisticas / partido 
# home_team ok
# away_team ok 
# goles en el primer tiempo -> first_half -> pasar a int
# goles en el segundo tiempo -> second_half -> pasar a int
# cambios en el resultado del partido (de empate a gana uno, de gana a empata, etc) -> funcion de bauti ok
# amarillas -> home_team_yellow_card + away_team_yellow_card
# rojas -> home_team_red_card + away_team_red_card
# x_goals_home -> expected_goals_xg_home
# x_goals_away -> expected_goals_xg_away
# posesion_home -> Ball_Possession_Home
# posesion_away -> Ball_Possession_Host
# chances de gol total -> Goal_Attempts_Home + Goal_Attempts_Host -> para el proposito de determinar un "buen partido", importan más las chances de gol en general que de cada equipo
# fouls_total -> Fouls_Committed_Home + Fouls_Committed_Host
# corners_home -> Corner_Kicks_Home
# corners_away -> Corner_Kicks_Host
# pass_accuracy_home -> Pass_Success_per_Home
# pass_accuracy_away -> Pass_Success_per_Host
# total_passes_home -> Completed_Passes_Home
# total_passes_away -> Completed_Passes_Host
# saves_home -> Goalkeeper_Saves_Home
# saves_away -> Goalkeeper_Saves_Host

 
# Posición en la tabla (a mitad de temporada) -> para despues
# Promedio de goles en el primer tiempo -> first_half -> pasar a int
# Promedio de goles en el segundo tiempo -> second_half -> pasar a int
# Promedio de cambios en el resultado del partido (de empate a gana uno, de gana a empata, etc) -> funcion de bauti
# Promedio de amarillas -> home_team_yellow_card + away_team_yellow_card
# Promedio de rojas -> home_team_red_card + away_team_red_card
# Promedio x_goals (habría que ver cuánto se corresponde con goles) 
# Promedio de posesión
# Promedio de chances de gol
# Promedio de faltas recibidas
# Promedio de faltas cometidas
# Promedio de corners
# Promedio atajadas a favor 
# Promedio atajadas en contra 
